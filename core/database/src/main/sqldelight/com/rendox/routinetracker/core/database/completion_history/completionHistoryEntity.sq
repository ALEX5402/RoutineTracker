import com.rendox.routinetracker.core.model.HistoricalStatus;
import kotlin.Float;
import kotlinx.datetime.LocalDate;

CREATE TABLE completionHistoryEntity (
    id INTEGER NOT NULL PRIMARY KEY,
    routineId INTEGER NOT NULL,
    date INTEGER AS LocalDate NOT NULL,
    status TEXT AS HistoricalStatus NOT NULL,
    scheduleDeviation REAL AS Float NOT NULL,
    timesCompleted REAL AS Float NOT NULL,
    FOREIGN KEY(routineId) REFERENCES routineEntity(id)
);

getHistoryEntriesByIndices:
SELECT *
FROM completionHistoryEntity
WHERE routineId = :routineId
    AND date BETWEEN :start AND :end
ORDER BY
        date ASC;

getHistoryEntryByDate:
SELECT *
FROM completionHistoryEntity
WHERE routineId = ? AND date = ?;

insertHistoryEntry:
INSERT INTO completionHistoryEntity
VALUES (?, ?, ?, ?, ?, ?);

updateHistoryEntryStatusByDate:
UPDATE completionHistoryEntity
SET status = ?,
    scheduleDeviation = ?,
    timesCompleted = ?
WHERE routineId = ? AND date = ?;

updateLastHistoryEntryStatusByStatus:
UPDATE completionHistoryEntity
SET status = :newStatus,
    scheduleDeviation = :currentScheduleDeviation
WHERE id = (
    SELECT id
    FROM completionHistoryEntity
    WHERE routineId = :routineId AND status IN :statusPredicate
    ORDER BY date DESC
    LIMIT 1
);

getLastHistoryEntryByStatus:
SELECT *
FROM completionHistoryEntity
WHERE routineId = :routineId
    AND status IN :matchingStatuses
    AND (:minDate IS NULL OR :minDate <= date)
    AND (:maxDate IS NULL OR date <= :maxDate)
ORDER BY date DESC
LIMIT 1;

getFirstHistoryEntryByStatus:
SELECT *
FROM completionHistoryEntity
WHERE routineId = :routineId
    AND status IN :matchingStatuses
    AND (:minDate IS NULL OR :minDate <= date)
    AND (:maxDate IS NULL OR date <= :maxDate)
ORDER BY date ASC
LIMIT 1;

getFirstHistoryEntry:
SELECT *
FROM completionHistoryEntity
WHERE routineId = ?
ORDER BY date ASC
LIMIT 1;

getLastHistoryEntry:
SELECT *
FROM completionHistoryEntity
WHERE routineId = ?
ORDER BY date DESC
LIMIT 1;

deleteHistoryEntry:
DELETE FROM completionHistoryEntity
WHERE routineId = ? AND date = ?;

getTotalTimesCompletedAtTheMomentOfDate:
SELECT TOTAL(timesCompleted)
FROM completionHistoryEntity
WHERE routineId = :routineId AND date >= :startDate AND date <= :endDate;

getScheduleDeviationAtTheMomentOfDate:
SELECT TOTAL(scheduleDeviation)
FROM completionHistoryEntity
WHERE routineId = :routineId AND date >= :startDate AND date <= :endDate;
